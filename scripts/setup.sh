#!/bin/bash

# Ultra-Advanced To-Do List - Automated Setup Script
# This script automates the entire setup process

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Node.js version
check_node_version() {
    if command_exists node; then
        NODE_VERSION=$(node --version | cut -d'v' -f2)
        MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1)
        if [ "$MAJOR_VERSION" -ge 18 ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Function to install Node.js on different systems
install_nodejs() {
    print_status "Installing Node.js..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if command_exists apt-get; then
            # Ubuntu/Debian
            print_status "Detected Ubuntu/Debian system"
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        elif command_exists dnf; then
            # Fedora
            print_status "Detected Fedora system"
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo dnf install nodejs npm
        elif command_exists pacman; then
            # Arch Linux
            print_status "Detected Arch Linux system"
            sudo pacman -S nodejs npm
        else
            print_error "Unsupported Linux distribution. Please install Node.js manually from https://nodejs.org/"
            exit 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        print_status "Detected macOS system"
        if command_exists brew; then
            brew install node
        else
            print_error "Homebrew not found. Please install Node.js manually from https://nodejs.org/"
            exit 1
        fi
    else
        print_error "Unsupported operating system. Please install Node.js manually from https://nodejs.org/"
        exit 1
    fi
}

# Main setup function
main() {
    echo "🚀 Ultra-Advanced To-Do List - Automated Setup"
    echo "=============================================="
    echo ""
    
    # Check operating system
    print_status "Detected OS: $OSTYPE"
    
    # Check Node.js
    print_status "Checking Node.js installation..."
    if check_node_version; then
        NODE_VERSION=$(node --version)
        print_success "Node.js $NODE_VERSION is installed and compatible"
    else
        print_warning "Node.js 18+ is required but not found"
        read -p "Would you like to install Node.js automatically? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            install_nodejs
        else
            print_error "Please install Node.js 18+ manually from https://nodejs.org/"
            exit 1
        fi
    fi
    
    # Check npm
    print_status "Checking npm installation..."
    if command_exists npm; then
        NPM_VERSION=$(npm --version)
        print_success "npm $NPM_VERSION is installed"
    else
        print_error "npm is not installed. Please reinstall Node.js from https://nodejs.org/"
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -f "package.json" ]; then
        print_error "package.json not found. Please run this script from the project root directory."
        exit 1
    fi
    
    # Install dependencies
    print_status "Installing project dependencies..."
    npm install
    
    if [ $? -eq 0 ]; then
        print_success "Dependencies installed successfully"
    else
        print_error "Failed to install dependencies"
        exit 1
    fi
    
    # Create environment file if it doesn't exist
    if [ ! -f ".env.local" ]; then
        print_status "Creating environment configuration..."
        cat > .env.local << EOF
# Ultra-Advanced To-Do List Configuration
# Generated by setup script on $(date)

# Application Settings
NEXT_PUBLIC_APP_NAME="Ultra Todo"
NEXT_PUBLIC_APP_VERSION="1.0.0"

# Development Settings
NODE_ENV=development
NEXT_PUBLIC_DEV_MODE=true

# 3D Rendering Settings
NEXT_PUBLIC_WEBGL_DEBUG=false
NEXT_PUBLIC_THREE_DEBUG=false

# Voice Recognition Settings
NEXT_PUBLIC_VOICE_ENABLED=true
NEXT_PUBLIC_SPEECH_LANG=en-US

# Performance Settings
NEXT_PUBLIC_PERFORMANCE_MONITORING=false

# Optional: External API Keys (uncomment and add your keys)
# GOOGLE_CALENDAR_API_KEY=your_api_key_here
# OPENAI_API_KEY=your_api_key_here
# SUPABASE_URL=your_supabase_url
# SUPABASE_ANON_KEY=your_supabase_key
EOF
        print_success "Environment file created: .env.local"
    else
        print_success "Environment file already exists: .env.local"
    fi
    
    # Verify installation
    print_status "Verifying installation..."
    
    # Check if Next.js can build
    print_status "Testing Next.js configuration..."
    npm run build > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        print_success "Build test passed"
    else
        print_warning "Build test failed, but this might be normal for development"
    fi
    
    # Final success message
    echo ""
    echo "🎉 Setup Complete!"
    echo "=================="
    echo ""
    print_success "Ultra-Advanced To-Do List is ready to run!"
    echo ""
    echo "Next steps:"
    echo "1. Start the development server: npm run dev"
    echo "2. Open your browser to: http://localhost:3000"
    echo "3. Create your first task and explore the 3D universe!"
    echo ""
    echo "Features you can try:"
    echo "• 3D Task Visualization"
    echo "• Voice Control (click the microphone)"
    echo "• Focus Mode"
    echo "• Achievement System"
    echo "• Multiple Themes"
    echo ""
    
    # Ask if user wants to start the server
    read -p "Would you like to start the development server now? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Starting development server..."
        echo ""
        echo "🌐 Opening http://localhost:3000 in your browser..."
        echo "Press Ctrl+C to stop the server when you're done"
        echo ""
        
        # Try to open browser (works on most systems)
        if command_exists xdg-open; then
            xdg-open http://localhost:3000 >/dev/null 2>&1 &
        elif command_exists open; then
            open http://localhost:3000 >/dev/null 2>&1 &
        elif command_exists start; then
            start http://localhost:3000 >/dev/null 2>&1 &
        fi
        
        # Start the development server
        npm run dev
    else
        echo ""
        print_success "Setup complete! Run 'npm run dev' when you're ready to start."
    fi
}

# Run main function
main "$@"
